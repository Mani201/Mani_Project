
RoDsel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800100  00800100  0000041e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a4  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002db  00000000  00000000  00000c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ac  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000133  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 31       	cpi	r26, 0x16	; 22
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  ac:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <TX0_char>:

int offset_flag=0;



void TX0_char(char c){ while(!(UCSR0A&0x20)); UDR0=c; }
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <TX0_char>
  b8:	8c b9       	out	0x0c, r24	; 12
  ba:	08 95       	ret

000000bc <TX0_STR>:
void TX0_STR(char *s){ while(*s)TX0_char(*s++); }
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	e8 2e       	mov	r14, r24
  c6:	e7 01       	movw	r28, r14
  c8:	7e 01       	movw	r14, r28
  ca:	f9 2e       	mov	r15, r25
  cc:	e7 01       	movw	r28, r14
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <TX0_STR+0x18>
  d0:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
  d4:	89 91       	ld	r24, Y+
  d6:	88 23       	and	r24, r24
  d8:	d9 f7       	brne	.-10     	; 0xd0 <TX0_STR+0x14>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	ff 90       	pop	r15
  e0:	ef 90       	pop	r14
  e2:	08 95       	ret

000000e4 <ReadCout>:
unsigned long ReadCout(){


	PORTA |= (1<<0);
  e4:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA &= ~(1<<1);
  e6:	d9 98       	cbi	0x1b, 1	; 27
	
	count =0;
  e8:	10 92 0c 01 	sts	0x010C, r1
  ec:	10 92 0d 01 	sts	0x010D, r1
  f0:	10 92 0e 01 	sts	0x010E, r1
  f4:	10 92 0f 01 	sts	0x010F, r1
	while((PINA & 0x01) == 0x01);
  f8:	c8 99       	sbic	0x19, 0	; 25
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <ReadCout+0x14>
  fc:	28 e1       	ldi	r18, 0x18	; 24
  fe:	30 e0       	ldi	r19, 0x00	; 0
	
	for(int i=0;i<24;i++){
		PORTA |= (1<<1);
 100:	d9 9a       	sbi	0x1b, 1	; 27
		count = count << 1;
 102:	80 91 0c 01 	lds	r24, 0x010C
 106:	90 91 0d 01 	lds	r25, 0x010D
 10a:	a0 91 0e 01 	lds	r26, 0x010E
 10e:	b0 91 0f 01 	lds	r27, 0x010F
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	aa 1f       	adc	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	80 93 0c 01 	sts	0x010C, r24
 11e:	90 93 0d 01 	sts	0x010D, r25
 122:	a0 93 0e 01 	sts	0x010E, r26
 126:	b0 93 0f 01 	sts	0x010F, r27
		PORTA &= ~(1<<1);
 12a:	d9 98       	cbi	0x1b, 1	; 27
		if((PINA & 0x01) == 0x01){
 12c:	c8 9b       	sbis	0x19, 0	; 25
 12e:	0b c0       	rjmp	.+22     	; 0x146 <ReadCout+0x62>
		 count++;
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	a1 1d       	adc	r26, r1
 134:	b1 1d       	adc	r27, r1
 136:	80 93 0c 01 	sts	0x010C, r24
 13a:	90 93 0d 01 	sts	0x010D, r25
 13e:	a0 93 0e 01 	sts	0x010E, r26
 142:	b0 93 0f 01 	sts	0x010F, r27
 146:	21 50       	subi	r18, 0x01	; 1
 148:	30 40       	sbci	r19, 0x00	; 0
	PORTA &= ~(1<<1);
	
	count =0;
	while((PINA & 0x01) == 0x01);
	
	for(int i=0;i<24;i++){
 14a:	d1 f6       	brne	.-76     	; 0x100 <ReadCout+0x1c>
		PORTA &= ~(1<<1);
		if((PINA & 0x01) == 0x01){
		 count++;
		 }
	}
	PORTA |= (1<<1);
 14c:	d9 9a       	sbi	0x1b, 1	; 27
	count = count^0x800000;
 14e:	80 91 0c 01 	lds	r24, 0x010C
 152:	90 91 0d 01 	lds	r25, 0x010D
 156:	a0 91 0e 01 	lds	r26, 0x010E
 15a:	b0 91 0f 01 	lds	r27, 0x010F
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	82 27       	eor	r24, r18
 168:	93 27       	eor	r25, r19
 16a:	a4 27       	eor	r26, r20
 16c:	b5 27       	eor	r27, r21
 16e:	80 93 0c 01 	sts	0x010C, r24
 172:	90 93 0d 01 	sts	0x010D, r25
 176:	a0 93 0e 01 	sts	0x010E, r26
 17a:	b0 93 0f 01 	sts	0x010F, r27
	PORTA &= ~(1<<1);
 17e:	d9 98       	cbi	0x1b, 1	; 27

	data1 = count;

	if(offset_flag == 0){
 180:	20 91 10 01 	lds	r18, 0x0110
 184:	30 91 11 01 	lds	r19, 0x0111
 188:	21 15       	cp	r18, r1
 18a:	31 05       	cpc	r19, r1
 18c:	71 f4       	brne	.+28     	; 0x1aa <ReadCout+0xc6>
		offset_data = data1;
 18e:	80 93 12 01 	sts	0x0112, r24
 192:	90 93 13 01 	sts	0x0113, r25
 196:	a0 93 14 01 	sts	0x0114, r26
 19a:	b0 93 15 01 	sts	0x0115, r27
		offset_flag = 1;		
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	30 93 11 01 	sts	0x0111, r19
 1a6:	20 93 10 01 	sts	0x0110, r18
	}
	if(data1 > offset_data){
 1aa:	20 91 12 01 	lds	r18, 0x0112
 1ae:	30 91 13 01 	lds	r19, 0x0113
 1b2:	40 91 14 01 	lds	r20, 0x0114
 1b6:	50 91 15 01 	lds	r21, 0x0115
 1ba:	28 17       	cp	r18, r24
 1bc:	39 07       	cpc	r19, r25
 1be:	4a 07       	cpc	r20, r26
 1c0:	5b 07       	cpc	r21, r27
 1c2:	68 f4       	brcc	.+26     	; 0x1de <ReadCout+0xfa>
		data2 = data1 - offset_data;
 1c4:	82 1b       	sub	r24, r18
 1c6:	93 0b       	sbc	r25, r19
 1c8:	a4 0b       	sbc	r26, r20
 1ca:	b5 0b       	sbc	r27, r21
 1cc:	80 93 08 01 	sts	0x0108, r24
 1d0:	90 93 09 01 	sts	0x0109, r25
 1d4:	a0 93 0a 01 	sts	0x010A, r26
 1d8:	b0 93 0b 01 	sts	0x010B, r27
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <ReadCout+0x10a>
	}
	else{
		data2 = 0;
 1de:	10 92 08 01 	sts	0x0108, r1
 1e2:	10 92 09 01 	sts	0x0109, r1
 1e6:	10 92 0a 01 	sts	0x010A, r1
 1ea:	10 92 0b 01 	sts	0x010B, r1
	}
	data1=0;
 1ee:	10 92 04 01 	sts	0x0104, r1
 1f2:	10 92 05 01 	sts	0x0105, r1
 1f6:	10 92 06 01 	sts	0x0106, r1
 1fa:	10 92 07 01 	sts	0x0107, r1
 1fe:	60 91 08 01 	lds	r22, 0x0108
 202:	70 91 09 01 	lds	r23, 0x0109
	
	return data2;

}
 206:	80 91 0a 01 	lds	r24, 0x010A
 20a:	90 91 0b 01 	lds	r25, 0x010B
 20e:	08 95       	ret

00000210 <HX711init>:
void HX711init(){
  DDRA=0x02;                   // SCK // PA1
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	8a bb       	out	0x1a, r24	; 26
  SCK_1; _delay_us(100); SCK_0; // 60us ÀÌ»ó POWER DOWN ÈÄ Nomal Mode
 214:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	81 e2       	ldi	r24, 0x21	; 33
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <HX711init+0x8>
 21c:	00 00       	nop
 21e:	d9 98       	cbi	0x1b, 1	; 27
  
}
 220:	08 95       	ret

00000222 <tx_init>:
void tx_init(unsigned long data){
 222:	6f 92       	push	r6
 224:	7f 92       	push	r7
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	3b 01       	movw	r6, r22
 23c:	4c 01       	movw	r8, r24
	unsigned long temp;

	temp = data/10000;
 23e:	20 e1       	ldi	r18, 0x10	; 16
 240:	37 e2       	ldi	r19, 0x27	; 39
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
 24a:	7b 01       	movw	r14, r22
 24c:	8c 01       	movw	r16, r24
	TX0_char(temp+48);
 24e:	82 2f       	mov	r24, r18
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	temp = (data%10000)/1000;
 256:	f8 ee       	ldi	r31, 0xE8	; 232
 258:	af 2e       	mov	r10, r31
 25a:	f3 e0       	ldi	r31, 0x03	; 3
 25c:	bf 2e       	mov	r11, r31
 25e:	c1 2c       	mov	r12, r1
 260:	d1 2c       	mov	r13, r1
 262:	c8 01       	movw	r24, r16
 264:	b7 01       	movw	r22, r14
 266:	a6 01       	movw	r20, r12
 268:	95 01       	movw	r18, r10
 26a:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
	TX0_char(temp+48);
 26e:	82 2f       	mov	r24, r18
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	temp = (data%1000)/100;
 276:	c4 01       	movw	r24, r8
 278:	b3 01       	movw	r22, r6
 27a:	a6 01       	movw	r20, r12
 27c:	95 01       	movw	r18, r10
 27e:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
 282:	e4 e6       	ldi	r30, 0x64	; 100
 284:	ee 2e       	mov	r14, r30
 286:	f1 2c       	mov	r15, r1
 288:	01 2d       	mov	r16, r1
 28a:	11 2d       	mov	r17, r1
 28c:	a8 01       	movw	r20, r16
 28e:	97 01       	movw	r18, r14
 290:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
	TX0_char(temp+48);
 294:	82 2f       	mov	r24, r18
 296:	80 5d       	subi	r24, 0xD0	; 208
 298:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	temp = (data%100)/10;
 29c:	c4 01       	movw	r24, r8
 29e:	b3 01       	movw	r22, r6
 2a0:	a8 01       	movw	r20, r16
 2a2:	97 01       	movw	r18, r14
 2a4:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
 2a8:	5a e0       	ldi	r21, 0x0A	; 10
 2aa:	e5 2e       	mov	r14, r21
 2ac:	f1 2c       	mov	r15, r1
 2ae:	01 2d       	mov	r16, r1
 2b0:	11 2d       	mov	r17, r1
 2b2:	a8 01       	movw	r20, r16
 2b4:	97 01       	movw	r18, r14
 2b6:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
	TX0_char(temp+48);
 2ba:	82 2f       	mov	r24, r18
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	temp = (data%10);
 2c2:	c4 01       	movw	r24, r8
 2c4:	b3 01       	movw	r22, r6
 2c6:	a8 01       	movw	r20, r16
 2c8:	97 01       	movw	r18, r14
 2ca:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
	TX0_char(temp+48);
 2ce:	86 2f       	mov	r24, r22
 2d0:	80 5d       	subi	r24, 0xD0	; 208
 2d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
}
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	08 95       	ret

000002f0 <main>:
int main(void){
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17

	DDRB = 0xff;
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	87 bb       	out	0x17, r24	; 23
	
	
	UCSR0B=0x08; 
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	8a b9       	out	0x0a, r24	; 10
	UBRR0L=103;  //  9600
 2fc:	87 e6       	ldi	r24, 0x67	; 103
 2fe:	89 b9       	out	0x09, r24	; 9

	HX711init();
 300:	0e 94 08 01 	call	0x210	; 0x210 <HX711init>
	TX0_char('\n');
	TX0_char('\r');
	
	
	if((weigth/10000) >= 3 ){
		PORTB = 0x01;
 304:	01 e0       	ldi	r16, 0x01	; 1
	}
	else PORTB = 0x02;
 306:	12 e0       	ldi	r17, 0x02	; 2

	HX711init();

	while(1){

	weigth = ReadCout()/4;
 308:	0e 94 72 00 	call	0xe4	; 0xe4 <ReadCout>
 30c:	a2 e0       	ldi	r26, 0x02	; 2
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	77 95       	ror	r23
 314:	67 95       	ror	r22
 316:	aa 95       	dec	r26
 318:	d1 f7       	brne	.-12     	; 0x30e <main+0x1e>
 31a:	60 93 00 01 	sts	0x0100, r22
 31e:	70 93 01 01 	sts	0x0101, r23
 322:	80 93 02 01 	sts	0x0102, r24
 326:	90 93 03 01 	sts	0x0103, r25

	tx_init(weigth);
 32a:	0e 94 11 01 	call	0x222	; 0x222 <tx_init>
	TX0_char('\n');
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	TX0_char('\r');
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	0e 94 5a 00 	call	0xb4	; 0xb4 <TX0_char>
	
	
	if((weigth/10000) >= 3 ){
 33a:	80 91 00 01 	lds	r24, 0x0100
 33e:	90 91 01 01 	lds	r25, 0x0101
 342:	a0 91 02 01 	lds	r26, 0x0102
 346:	b0 91 03 01 	lds	r27, 0x0103
 34a:	80 33       	cpi	r24, 0x30	; 48
 34c:	25 e7       	ldi	r18, 0x75	; 117
 34e:	92 07       	cpc	r25, r18
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	a2 07       	cpc	r26, r18
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	b2 07       	cpc	r27, r18
 358:	10 f0       	brcs	.+4      	; 0x35e <main+0x6e>
		PORTB = 0x01;
 35a:	08 bb       	out	0x18, r16	; 24
 35c:	d5 cf       	rjmp	.-86     	; 0x308 <main+0x18>
	}
	else PORTB = 0x02;
 35e:	18 bb       	out	0x18, r17	; 24
 360:	d3 cf       	rjmp	.-90     	; 0x308 <main+0x18>

00000362 <__udivmodsi4>:
 362:	a1 e2       	ldi	r26, 0x21	; 33
 364:	1a 2e       	mov	r1, r26
 366:	aa 1b       	sub	r26, r26
 368:	bb 1b       	sub	r27, r27
 36a:	fd 01       	movw	r30, r26
 36c:	0d c0       	rjmp	.+26     	; 0x388 <__udivmodsi4_ep>

0000036e <__udivmodsi4_loop>:
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	ee 1f       	adc	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	a2 17       	cp	r26, r18
 378:	b3 07       	cpc	r27, r19
 37a:	e4 07       	cpc	r30, r20
 37c:	f5 07       	cpc	r31, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__udivmodsi4_ep>
 380:	a2 1b       	sub	r26, r18
 382:	b3 0b       	sbc	r27, r19
 384:	e4 0b       	sbc	r30, r20
 386:	f5 0b       	sbc	r31, r21

00000388 <__udivmodsi4_ep>:
 388:	66 1f       	adc	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	1a 94       	dec	r1
 392:	69 f7       	brne	.-38     	; 0x36e <__udivmodsi4_loop>
 394:	60 95       	com	r22
 396:	70 95       	com	r23
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	bd 01       	movw	r22, r26
 3a2:	cf 01       	movw	r24, r30
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
